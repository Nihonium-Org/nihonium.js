{"version":3,"sources":["../src/providers/anime/index.ts","../src/helpers/request.ts","../src/providers/base/main-class.ts","../src/providers/base/meta/index.ts","../src/providers/meta/kuroji/types/filterdto.ts","../src/providers/meta/kuroji/kuroji.ts","../src/providers/meta/index.ts","../src/providers/meta/kuroji/types/types.ts","../src/utils/providers.ts"],"sourcesContent":["export default {};\n","import ky, { HTTPError, type Options as KyOptions } from 'ky';\n\n/**\n * Represents rate limit information.\n * @property {number} remaining - The number of requests remaining before hitting the rate limit.\n * @property {number} reset - The Unix timestamp when the rate limit resets.\n * @property {number} retryAfter - The number of seconds to wait before retrying a request.\n */\ninterface RateLimitInfo {\n\tremaining: number;\n\treset: number;\n\tretryAfter: number;\n}\n\n/**\n * Represents proxy configuration.\n * @property {string | string[]} url - The proxy URL or array of URLs for rotation.\n * @property {string} [key] - X-API-Key header value (if any).\n * @property {number} [rotateInterval] - The proxy rotation interval in milliseconds. (default: 5000)\n */\nexport interface ProxyConfig {\n\turl: string | string[];\n\tkey?: string;\n\trotateInterval?: number;\n}\n\n/**\n * A list of user agents to use for requests.\n */\nconst userAgents = [\n\t'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/37.0.2062.94 Chrome/37.0.2062.94 Safari/537.36',\n\t'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36',\n\t'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko',\n\t'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0',\n\t'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/600.8.9 (KHTML, like Gecko) Version/8.0.8 Safari/600.8.9',\n\t'Mozilla/5.0 (iPad; CPU OS 8_4_1 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12H321 Safari/600.1.4',\n\t'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36',\n\t'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36',\n\t'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10240',\n\t'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0',\n\t'Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko',\n\t'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36',\n\t'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko',\n\t'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0',\n\t'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/600.7.12 (KHTML, like Gecko) Version/8.0.7 Safari/600.7.12',\n\t'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36',\n\t'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:40.0) Gecko/20100101 Firefox/40.0',\n\t'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/600.8.9 (KHTML, like Gecko) Version/7.1.8 Safari/537.85.17',\n\t'Mozilla/5.0 (iPad; CPU OS 8_4 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12H143 Safari/600.1.4',\n\t'Mozilla/5.0 (iPad; CPU OS 8_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12F69 Safari/600.1.4',\n];\n\n/**\n * Gets a random user agent from the list.\n * @returns {string} A random user agent string.\n */\nconst getRandomUserAgent = () => {\n\treturn userAgents[Math.floor(Math.random() * userAgents.length)];\n};\n\n/**\n * Represents the response of a request.\n * @property {T | null} data - The data returned by the request, or null if the request failed.\n * @property {Error | null} error - The error that occurred during the request, or null if the request was successful.\n * @property {boolean} isHTTPError - Indicates if the error was an HTTP error.\n * @property {boolean} isOnRateLimit - Indicates if the request hit the rate limit.\n * @property {boolean} isLoading - Indicates if the request is currently loading.\n * @property {boolean} isFetching - Indicates if the request is currently fetching data.\n * @property {boolean} isPending - Indicates if the request is pending.\n * @property {boolean} isFetched - Indicates if the request has been fetched.\n * @property {boolean} isLoaded - Indicates if the request has been loaded.\n * @property {Response | null} response - The raw Response object when manualParse is true.\n */\nexport interface RequestResponse<T> {\n\tdata: T | null;\n\terror: Error | null;\n\tisHTTPError: boolean;\n\tisOnRateLimit: boolean;\n\tisLoading: boolean;\n\tisFetching: boolean;\n\tisPending: boolean;\n\tisFetched: boolean;\n\tisLoaded: boolean;\n\tresponse: Response | null;\n}\n\n/**\n * Represents a client for making HTTP requests.\n */\nexport class NihoniumClient {\n\tprivate client: typeof ky;\n\tprivate baseUrl?: string;\n\tprivate rateLimitInfo: RateLimitInfo = {\n\t\tremaining: Number.POSITIVE_INFINITY,\n\t\treset: 0,\n\t\tretryAfter: 60,\n\t};\n\tprivate proxyConfig?: ProxyConfig;\n\tprivate proxyUrls: string[] = [];\n\tprivate currentProxyIndex = 0;\n\tprivate rotationInterval?: Timer;\n\tprivate validUrl = /^https?:\\/\\/.+/;\n\n\t/**\n\t * Creates a new instance of the NihoniumClient.\n\t * @param {string} [baseUrl] - The base URL for the requests.\n\t * @param {ProxyConfig} [proxyConfig] - The proxy configuration.\n\t */\n\tconstructor(baseUrl?: string, proxyConfig?: ProxyConfig) {\n\t\tthis.baseUrl = baseUrl;\n\t\tthis.client = ky.create({\n\t\t\tprefixUrl: baseUrl,\n\t\t\thooks: {\n\t\t\t\tbeforeRequest: [\n\t\t\t\t\t(request) => {\n\t\t\t\t\t\trequest.headers.set('User-Agent', getRandomUserAgent());\n\t\t\t\t\t\trequest.headers.set('x-requested-with', 'XMLHttpRequest');\n\n\t\t\t\t\t\tif (this.proxyConfig?.key) {\n\t\t\t\t\t\t\trequest.headers.set('x-api-key', this.proxyConfig.key);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (request.url.includes('kuroji')) {\n\t\t\t\t\t\t\trequest.headers.set(\n\t\t\t\t\t\t\t\t'User-Agent',\n\t\t\t\t\t\t\t\t'nihonium client (https://github.com/Nihonium-Org/nihonium.js)'\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tafterResponse: [\n\t\t\t\t\tasync (_request, _options, response) => {\n\t\t\t\t\t\tawait this.handleRateLimit(response);\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tbeforeRetry: [\n\t\t\t\t\tasync ({ error }) => {\n\t\t\t\t\t\tif (error instanceof HTTPError && error.response.status === 429) {\n\t\t\t\t\t\t\tconst delay = this.rateLimitInfo.retryAfter * 1000;\n\t\t\t\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, delay));\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tretry: {\n\t\t\t\tlimit: 2,\n\t\t\t\tmethods: ['get', 'post', 'put', 'delete', 'patch'],\n\t\t\t},\n\t\t});\n\n\t\tif (proxyConfig) {\n\t\t\tthis.setProxy(proxyConfig);\n\t\t}\n\t}\n\n\t/**\n\t * Set or change the proxy configuration.\n\t * @param {ProxyConfig} proxyConfig - The proxy configuration.\n\t */\n\tsetProxy(proxyConfig: ProxyConfig): void {\n\t\tif (!proxyConfig?.url) return;\n\n\t\tif (typeof proxyConfig.url === 'string') {\n\t\t\tif (!this.validUrl.test(proxyConfig.url)) {\n\t\t\t\tthrow new Error('Proxy URL is invalid!');\n\t\t\t}\n\t\t\tthis.proxyUrls = [proxyConfig.url];\n\t\t} else if (Array.isArray(proxyConfig.url)) {\n\t\t\tfor (const [i, url] of proxyConfig.url.entries()) {\n\t\t\t\tif (!this.validUrl.test(url)) {\n\t\t\t\t\tthrow new Error(`Proxy URL at index ${i} is invalid!`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.proxyUrls = [...proxyConfig.url];\n\t\t\tthis.setupProxyRotation(proxyConfig);\n\t\t}\n\n\t\tthis.proxyConfig = proxyConfig;\n\t\tthis.currentProxyIndex = 0;\n\t}\n\n\t/**\n\t * Setup proxy rotation for multiple URLs.\n\t * @param {ProxyConfig} proxyConfig - The proxy configuration.\n\t */\n\tprivate setupProxyRotation(proxyConfig: ProxyConfig): void {\n\t\tif (this.rotationInterval) {\n\t\t\tclearInterval(this.rotationInterval);\n\t\t}\n\n\t\tif (this.proxyUrls.length > 1) {\n\t\t\tconst interval = proxyConfig.rotateInterval ?? 5000;\n\t\t\tthis.rotationInterval = setInterval(() => {\n\t\t\t\tthis.currentProxyIndex = (this.currentProxyIndex + 1) % this.proxyUrls.length;\n\t\t\t}, interval);\n\t\t}\n\t}\n\n\t/**\n\t * Get the current proxy URL.\n\t * @returns {string | null} The current proxy URL or null if no proxy is configured.\n\t */\n\tprivate getCurrentProxyUrl(): string | null {\n\t\tif (this.proxyUrls.length === 0) return null;\n\t\treturn this.proxyUrls[this.currentProxyIndex];\n\t}\n\n\t/**\n\t * Handles rate limit information from the response headers.\n\t * @param {Response} response - The response from the request.\n\t * @returns {Promise<void>} - A promise that resolves when the rate limit information has been handled.\n\t */\n\tprivate async handleRateLimit(response: Response): Promise<void> {\n\t\tconst remaining = Number.parseInt(response.headers.get('x-ratelimit-remaining') || 'Infinity');\n\t\tconst reset = Number.parseInt(response.headers.get('x-ratelimit-reset') || '0');\n\t\tconst retryAfter = Number.parseInt(response.headers.get('retry-after') || '60');\n\n\t\tthis.rateLimitInfo = {\n\t\t\tremaining,\n\t\t\treset,\n\t\t\tretryAfter,\n\t\t};\n\t}\n\n\t/**\n\t * Transforms the URL to go through proxy if configured.\n\t * @param {string} url - The original URL.\n\t * @returns {string} The transformed URL.\n\t */\n\tprivate transformUrlForProxy(url: string): string {\n\t\tif (!this.proxyConfig) return url;\n\n\t\tconst proxyUrl = this.getCurrentProxyUrl();\n\t\tif (!proxyUrl) return url;\n\n\t\tif (url.startsWith('http://') || url.startsWith('https://')) {\n\t\t\treturn `${proxyUrl}${url}`;\n\t\t}\n\n\t\tif (this.baseUrl) {\n\t\t\tconst fullUrl = new URL(url, this.baseUrl).toString();\n\t\t\treturn `${proxyUrl}${fullUrl}`;\n\t\t}\n\n\t\treturn `${proxyUrl}${url}`;\n\t}\n\n\t/**\n\t * Handles a request and returns the response.\n\t * @param {string} method - The HTTP method to use for the request.\n\t * @param {string} url - The URL for the request.\n\t * @param {KyOptions & { manualParse?: boolean }} [options] - Additional options for the request.\n\t * @returns {Promise<RequestResponse<T>>} - A promise that resolves to the response of the request.\n\t */\n\tprivate async handleRequest<T>(\n\t\tmethod: string,\n\t\turl: string,\n\t\toptions?: KyOptions & { manualParse?: boolean }\n\t): Promise<RequestResponse<T>> {\n\t\tconst response: RequestResponse<T> = {\n\t\t\tdata: null,\n\t\t\terror: null,\n\t\t\tisHTTPError: false,\n\t\t\tisOnRateLimit: false,\n\t\t\tisLoading: true,\n\t\t\tisFetching: true,\n\t\t\tisPending: true,\n\t\t\tisFetched: false,\n\t\t\tisLoaded: false,\n\t\t\tresponse: null,\n\t\t};\n\n\t\ttry {\n\t\t\tif (this.rateLimitInfo.remaining <= 0) {\n\t\t\t\tresponse.isOnRateLimit = true;\n\t\t\t\tconst now = Math.floor(Date.now() / 1000);\n\t\t\t\tconst waitTime = Math.max(this.rateLimitInfo.reset - now, 0);\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, waitTime * 1000));\n\t\t\t}\n\n\t\t\tconst transformedUrl = this.transformUrlForProxy(url);\n\n\t\t\tconst apiResponse = await this.client(transformedUrl, {\n\t\t\t\tmethod,\n\t\t\t\t...options,\n\t\t\t\theaders: {\n\t\t\t\t\t...options?.headers,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (options?.manualParse) {\n\t\t\t\tresponse.response = apiResponse;\n\t\t\t\tresponse.isFetched = true;\n\t\t\t\tresponse.isLoaded = true;\n\t\t\t} else {\n\t\t\t\tconst contentType = apiResponse.headers.get('content-type') || '';\n\t\t\t\tresponse.data = contentType.includes('application/json')\n\t\t\t\t\t? await apiResponse.json()\n\t\t\t\t\t: ((await apiResponse.text()) as T);\n\n\t\t\t\tresponse.isFetched = true;\n\t\t\t\tresponse.isLoaded = true;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (error instanceof HTTPError) {\n\t\t\t\tconst errorBody = await error.response.text().catch(() => '');\n\t\t\t\tlet errorMessage = `HTTP ${error.response.status}`;\n\n\t\t\t\ttry {\n\t\t\t\t\tconst jsonError = JSON.parse(errorBody);\n\t\t\t\t\terrorMessage += `: ${jsonError.message || error.message}`;\n\t\t\t\t} catch {\n\t\t\t\t\terrorMessage += errorBody ? `: ${errorBody}` : `: ${error.message}`;\n\t\t\t\t}\n\n\t\t\t\tresponse.error = new Error(errorMessage);\n\t\t\t\tresponse.isHTTPError = true;\n\t\t\t} else {\n\t\t\t\tresponse.error = error as Error;\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.isLoading = false;\n\t\t\tresponse.isFetching = false;\n\t\t\tresponse.isPending = false;\n\t\t}\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * Makes a GET request.\n\t * @param {string} url - The URL for the request.\n\t * @param {KyOptions & { manualParse?: boolean }} [options] - Additional options for the request.\n\t * @returns {Promise<RequestResponse<T>>} - A promise that resolves to the response of the request.\n\t */\n\tasync get<T>(\n\t\turl: string,\n\t\toptions?: KyOptions & { manualParse?: boolean }\n\t): Promise<RequestResponse<T>> {\n\t\treturn this.handleRequest<T>('get', url, options);\n\t}\n\n\t/**\n\t * Makes a POST request.\n\t * @param {string} url - The URL for the request.\n\t * @param {KyOptions & { manualParse?: boolean }} [options] - Additional options for the request.\n\t * @returns {Promise<RequestResponse<T>>} - A promise that resolves to the response of the request.\n\t */\n\tasync post<T>(\n\t\turl: string,\n\t\toptions?: KyOptions & { manualParse?: boolean }\n\t): Promise<RequestResponse<T>> {\n\t\treturn this.handleRequest<T>('post', url, options);\n\t}\n\n\t/**\n\t * Makes a PUT request.\n\t * @param {string} url - The URL for the request.\n\t * @param {KyOptions & { manualParse?: boolean }} [options] - Additional options for the request.\n\t * @returns {Promise<RequestResponse<T>>} - A promise that resolves to the response of the request.\n\t */\n\tasync put<T>(\n\t\turl: string,\n\t\toptions?: KyOptions & { manualParse?: boolean }\n\t): Promise<RequestResponse<T>> {\n\t\treturn this.handleRequest<T>('put', url, options);\n\t}\n\n\t/**\n\t * Makes a DELETE request.\n\t * @param {string} url - The URL for the request.\n\t * @param {KyOptions & { manualParse?: boolean }} [options] - Additional options for the request.\n\t * @returns {Promise<RequestResponse<T>>} - A promise that resolves to the response of the request.\n\t */\n\tasync delete<T>(\n\t\turl: string,\n\t\toptions?: KyOptions & { manualParse?: boolean }\n\t): Promise<RequestResponse<T>> {\n\t\treturn this.handleRequest<T>('delete', url, options);\n\t}\n\n\t/**\n\t * Makes a PATCH request.\n\t * @param {string} url - The URL for the request.\n\t * @param {KyOptions & { manualParse?: boolean }} [options] - Additional options for the request.\n\t * @returns {Promise<RequestResponse<T>>} - A promise that resolves to the response of the request.\n\t */\n\tasync patch<T>(\n\t\turl: string,\n\t\toptions?: KyOptions & { manualParse?: boolean }\n\t): Promise<RequestResponse<T>> {\n\t\treturn this.handleRequest<T>('patch', url, options);\n\t}\n\n\t/**\n\t * Cleanup method to clear intervals when the client is no longer needed.\n\t */\n\tdestroy(): void {\n\t\tif (this.rotationInterval) {\n\t\t\tclearInterval(this.rotationInterval);\n\t\t}\n\t}\n}\n\n/**\n * Creates a new instance of the NihoniumClient with a default base URL.\n */\nexport const nihonium = new NihoniumClient();\n","import { NihoniumClient, type ProxyConfig } from '../../helpers';\n\nexport class BaseProvider {\n\tprotected client: NihoniumClient;\n\tprotected proxyConfig?: ProxyConfig;\n\tprotected baseUrl?: string;\n\n\tconstructor(baseUrl?: string, proxyConfig?: ProxyConfig) {\n\t\tthis.baseUrl = baseUrl;\n\t\tthis.proxyConfig = proxyConfig;\n\t\tthis.client = new NihoniumClient(baseUrl, proxyConfig);\n\t}\n}\n","import { BaseProvider } from '../main-class';\n\nexport abstract class MetaProvider extends BaseProvider {\n\tprotected abstract readonly baseUrl: string;\n\tprotected abstract readonly name: string;\n\tprotected abstract readonly headers: Record<string, string>;\n}\n","import type {\n\tAgeRating,\n\tLanguage,\n\tMediaFormat,\n\tMediaSeason,\n\tMediaSort,\n\tMediaSource,\n\tMediaStatus,\n\tMediaType,\n} from './filter';\n\nexport class FilterDto {\n\tconstructor(partial?: Partial<FilterDto>) {\n\t\tObject.assign(this, partial);\n\t}\n\n\tsort?: MediaSort[];\n\tperPage?: number;\n\tpage?: number;\n\tsourceIn?: MediaSource[];\n\tpopularityLesser?: number;\n\tpopularityGreater?: number;\n\tpopularityNot?: number;\n\tscoreLesser?: number;\n\tscoreGreater?: number;\n\tscoreNot?: number;\n\ttagCategoryNotIn?: string[];\n\ttagCategoryIn?: string[];\n\ttagNotIn?: string[];\n\ttagIn?: string[];\n\tstudioIn?: string[];\n\tcharacterIn?: string[];\n\tvoiceActorIn?: string[];\n\tgenreNotIn?: string[];\n\tgenreIn?: string[];\n\tdurationLesser?: number;\n\tdurationGreater?: number;\n\tepisodesLesser?: number;\n\tepisodesGreater?: number;\n\tstatusNotIn?: MediaStatus[];\n\tstatusNot?: MediaStatus;\n\tstatusIn?: MediaStatus[];\n\tformatNotIn?: MediaFormat[];\n\tformatNot?: MediaFormat;\n\tformatIn?: MediaFormat[];\n\tendDateLike?: string;\n\tendDateLesser?: string;\n\tendDateGreater?: string;\n\tstartDateLike?: string;\n\tstartDateLesser?: string;\n\tstartDateGreater?: string;\n\tidMalNotIn?: number[];\n\tidMalIn?: number[];\n\tidMalNot?: number;\n\tidNotIn?: number[];\n\tidIn?: number[];\n\tidNot?: number;\n\tquery?: string;\n\tcountryOfOrigin?: string;\n\tisAdult?: boolean;\n\tnsfw?: boolean;\n\tisLicensed?: boolean;\n\tformat?: MediaFormat;\n\ttype?: MediaType;\n\tstatus?: MediaStatus;\n\tseason?: MediaSeason;\n\tlanguage?: Language;\n\tageRating?: AgeRating[];\n\tidMal?: number;\n\tid?: number;\n}\n\nexport function convertFilterToParams(filter: FilterDto): Record<string, string> {\n\tconst params: Record<string, string> = {};\n\n\tfor (const [key, value] of Object.entries(filter)) {\n\t\tif (value === undefined || value === null) continue;\n\n\t\tif (Array.isArray(value)) {\n\t\t\tif (value.length > 0) {\n\t\t\t\tparams[key] = value.join(',');\n\t\t\t}\n\t\t} else if (typeof value === 'boolean') {\n\t\t\tparams[key] = value.toString();\n\t\t} else if (typeof value === 'number' || typeof value === 'string') {\n\t\t\tparams[key] = value.toString();\n\t\t}\n\t}\n\n\treturn params;\n}\n","import type { ISource } from \"../../../types/provider\";\nimport { MetaProvider } from \"../../base\";\nimport { type FilterDto, convertFilterToParams } from \"./types/filterdto\";\nimport type {\n  EProvider,\n  FranchiseResponse,\n  IBasicKuroji,\n  ICharacterEdge,\n  IEpisode,\n  IEpisodeDetails,\n  IKuroji,\n  IProvider,\n  ITag,\n  Response,\n  SearchResponse,\n  TSchedule,\n} from \"./types/types\";\n\nclass Kuroji extends MetaProvider {\n  override readonly name = \"Kuroji\";\n  protected override baseUrl = \"\";\n  protected override headers = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\":\n      \"nihonium client (https://github.com/Nihonium-Org/nihonium.js)\",\n  };\n\n  public setBaseUrl(url: string) {\n    this.baseUrl = url;\n  }\n\n  async getInfo(id: number): Promise<IKuroji> {\n    const { data, error } = await this.client.get<IKuroji>(\n      `${this.baseUrl}/api/anime/info/${id}`,\n      {\n        headers: this.headers,\n      },\n    );\n\n    if (error || !data) throw error;\n\n    return data;\n  }\n\n  async search(q: string): Promise<SearchResponse<IBasicKuroji>> {\n    const { data, error } = await this.client.get<SearchResponse<IBasicKuroji>>(\n      `${this.baseUrl}/api/anime/search/${q}`,\n      {\n        headers: this.headers,\n      },\n    );\n\n    if (error || !data) throw error;\n\n    return data;\n  }\n\n  async getFilter(filter: FilterDto): Promise<Response<IBasicKuroji>> {\n    const params = convertFilterToParams(filter);\n    const queryString = `?${new URLSearchParams(params).toString()}`;\n    const { data, error } = await this.client.get<Response<IBasicKuroji>>(\n      `${this.baseUrl}/api/anime/filter${queryString}`,\n      {\n        headers: this.headers,\n      },\n    );\n\n    if (error || !data) throw error;\n\n    return data;\n  }\n\n  async getRecommendations(\n    id: number,\n    filter: FilterDto,\n  ): Promise<Response<IBasicKuroji>> {\n    const params = convertFilterToParams(filter);\n    const queryString = `?${new URLSearchParams(params).toString()}`;\n    const { data, error } = await this.client.get<Response<IBasicKuroji>>(\n      `${this.baseUrl}/api/anime/info/${id}/recommendations${queryString}`,\n      {\n        headers: this.headers,\n      },\n    );\n\n    if (error || !data) throw error;\n\n    return data;\n  }\n\n  async getChronology(\n    id: number,\n    filter: FilterDto,\n  ): Promise<Response<IBasicKuroji>> {\n    const params = convertFilterToParams(filter);\n    const queryString = `?${new URLSearchParams(params).toString()}`;\n    const { data, error } = await this.client.get<Response<IBasicKuroji>>(\n      `${this.baseUrl}/api/anime/info/${id}/chronology${queryString}`,\n      {\n        headers: this.headers,\n      },\n    );\n\n    if (error || !data) throw error;\n\n    return data;\n  }\n\n  async getFranchise(\n    franchise: string,\n    filter: FilterDto,\n  ): Promise<FranchiseResponse> {\n    const params = convertFilterToParams(filter);\n    const queryString = `?${new URLSearchParams(params).toString()}`;\n    const { data, error } = await this.client.get<Promise<FranchiseResponse>>(\n      `${this.baseUrl}/api/anime/franchise/${franchise}${queryString}`,\n      {\n        headers: this.headers,\n      },\n    );\n\n    if (error || !data) throw error;\n\n    return data;\n  }\n\n  async getCharacters(\n    id: number,\n    page = 1,\n    perPage = 25,\n  ): Promise<Response<ICharacterEdge[]>> {\n    const { data, error } = await this.client.get<Response<ICharacterEdge[]>>(\n      `${this.baseUrl}/api/anime/info/${id}/characters?page=${page}&perPage=${perPage}`,\n      {\n        headers: this.headers,\n      },\n    );\n\n    if (error || !data) throw error;\n\n    return data;\n  }\n\n  async getRandom(): Promise<IKuroji> {\n    const { data, error } = await this.client.get<IKuroji>(\n      `${this.baseUrl}/api/anime/random`,\n      {\n        headers: this.headers,\n      },\n    );\n\n    if (error || !data) throw error;\n\n    return data;\n  }\n\n  async getSchedule(): Promise<TSchedule> {\n    const { data, error } = await this.client.get<TSchedule>(\n      `${this.baseUrl}/api/anime/schedule`,\n      {\n        headers: this.headers,\n      },\n    );\n\n    if (error || !data) throw error;\n\n    return data;\n  }\n\n  async getAllGenres(): Promise<string[]> {\n    const { data, error } = await this.client.get<string[]>(\n      `${this.baseUrl}/api/anime/genres`,\n      {\n        headers: this.headers,\n      },\n    );\n\n    if (error || !data) throw error;\n\n    return data;\n  }\n\n  async getAllTags(page = 1, perPage = 25): Promise<Response<ITag[]>> {\n    const { data, error } = await this.client.get<Response<ITag[]>>(\n      `${this.baseUrl}/api/anime/tags?page=${page}&perPage=${perPage}`,\n      {\n        headers: this.headers,\n      },\n    );\n\n    if (error || !data) throw error;\n\n    return data;\n  }\n\n  async getEpisodes(id: number): Promise<IEpisode[]> {\n    const { data, error } = await this.client.get<IEpisode[]>(\n      `${this.baseUrl}/api/anime/info/${id}/episodes`,\n      {\n        headers: this.headers,\n      },\n    );\n\n    if (error || !data) throw error;\n\n    return data;\n  }\n\n  async getEpisode(id: number, ep: number): Promise<IEpisodeDetails> {\n    const { data, error } = await this.client.get<IEpisodeDetails>(\n      `${this.baseUrl}/api/anime/info/${id}/episodes/${ep}`,\n      {\n        headers: this.headers,\n      },\n    );\n\n    if (error || !data) throw error;\n\n    return data;\n  }\n\n  async getProviders(id: number, ep: number): Promise<IProvider> {\n    const { data, error } = await this.client.get<IProvider>(\n      `${this.baseUrl}/api/anime/info/${id}/providers/${ep}`,\n      {\n        headers: this.headers,\n      },\n    );\n\n    if (error || !data) throw error;\n\n    return data;\n  }\n\n  async getSources(\n    id: number,\n    ep: number,\n    provider: EProvider,\n  ): Promise<ISource> {\n    const { data, error } = await this.client.get<ISource>(\n      `${this.baseUrl}/api/anime/watch/${id}/episodes/${ep}?provider=${provider}`,\n      {\n        headers: this.headers,\n      },\n    );\n\n    if (error || !data) throw error;\n\n    return data;\n  }\n}\n\nexport default Kuroji;\n","import Kuroji from \"./kuroji/kuroji\";\n\nexport default {\n  Kuroji,\n};\n","export interface IKuroji {\n\tid: number\n\tidMal?: number\n\ttitle: ITitle\n\tbannerImage?: string\n\tstatus?: string\n\ttype?: string\n\tformat?: string\n\tcoverImage: ICover\n\tupdatedAt: number\n\tdescription?: string\n\tstartDate: IFuzzyDate\n\tendDate: IFuzzyDate\n\tseason?: string\n\tseasonYear?: number\n\tepisodes?: number\n\tsub?: number\n\tdub?: number\n\tduration?: number\n\tcountryOfOrigin?: string\n\tisLicensed?: boolean\n\tsource?: string\n\thashTag?: string\n\tisLocked?: boolean\n\tisAdult?: boolean\n\taverageScore?: number\n\tmeanScore?: number\n\tscore?: number\n\tpopularity?: number\n\ttrending?: number\n\tfavourites?: number\n\tgenres?: string[]\n\tsynonyms?: string[]\n\ttrailer?: ITrailer\n\tstudios: IStudioEdge[]\n\tairingSchedule: IAiringSchedule[]\n\ttags: ITag[]\n\trankings: IRanking[]\n\texternalLinks: IExternalLink[]\n\tstreamingEpisodes: IStreamingEpisode[]\n\tscoreDistribution: IScoreDistribution[]\n\tstatusDistribution: IStatusDistribution[]\n\n\tshikimori: IShikimori\n\tkitsu: IKitsu\n}\n\nexport interface ITitle {\n\tromaji?: string\n\tenglish?: string\n\tnative?: string\n}\n\nexport interface ICover {\n\tcolor?: string\n\tlarge?: string\n\tmedium?: string\n\textraLarge?: string\n}\n\nexport interface IFuzzyDate {\n\tday?: number\n\tmonth?: number\n\tyear?: number\n}\n\nexport interface ITrailer {\n\tid: string\n\tsite?: string\n\tthumbnail?: string\n}\n\nexport interface ICharacterEdge {\n\trole?: string\n\tcharacter: ICharacter\n\tvoiceActors: IVoiceActor[]\n}\n\nexport interface ICharacter {\n\tname: IName\n\timage: IImage\n}\n\nexport interface IVoiceActor {\n\tlanguage?: string\n\tname: IName\n\timage: IImage\n}\n\nexport interface IName {\n\tfull?: string\n\tnative?: string\n\talternative?: string[]\n}\n\nexport interface IImage {\n\tlarge?: string\n\tmedium?: string\n}\n\nexport interface ITag {\n\tid: number\n\tname?: string\n\tdescription?: string\n\tcategory?: string\n\trank?: number\n\tisSpoiler?: boolean\n\tisAdult?: boolean\n}\n\nexport interface IExternalLink {\n\tid: number\n\turl?: string\n\tsite?: string\n\tsiteId?: number\n\ttype?: string\n\tlanguage?: string\n\tcolor?: string\n\ticon?: string\n\tnotes?: string\n\tisDisabled?: boolean\n}\n\nexport interface IStreamingEpisode {\n\ttitle?: string\n\tthumbnail?: string\n\turl?: string\n\tsite?: string\n}\n\nexport interface IStudioEdge {\n\tisMain?: boolean\n\tstduio: IStudio\n}\n\nexport interface IStudio {\n\tid: number\n\tname?: string\n}\n\nexport interface IAiringSchedule {\n\tid: number\n\tepisode?: number\n\tairingAt?: number\n}\n\nexport interface IRanking {\n\tid: number\n\trank?: number\n\ttype?: string\n\tformat?: string\n\tyear?: number\n\tseason?: string\n\tallTime?: boolean\n\tcontext?: string\n}\n\nexport interface IScoreDistribution {\n\tscore?: number\n\tamount?: number\n}\n\nexport interface IStatusDistribution {\n\tstatus?: string\n\tamount?: number\n}\n\nexport interface IBasicShikimori {\n\tid?: string\n\tmalId?: number\n\trussian?: string\n\tlicenseNameRu?: string\n\tepisodes?: number\n\tepisodesAired?: number\n\turl?: string\n\tfranchise?: string\n\tposter?: IPoster\n}\n\nexport interface IBasicKitsu {\n\tid?: string\n\tanilistId?: number\n\ttitles?: IKitsuTitle\n\tslug?: string\n\tsynopsis?: string\n\tepisodeCount?: number\n\tepisodeLength?: number\n\tcanonicalTitle?: string\n\taverageRating?: string\n\tageRating?: string\n\tageRatingGuide?: string\n\tposterImage?: IKitsuPoster\n\tcoverImage?: IKitsuCover\n\tshowType?: string\n}\n\nexport interface IBasicKuroji {\n\tid: number\n\tidMal?: number\n\n\ttitle?: ITitle\n\n\tsynonyms?: string[]\n\n\tbannerImage?: string\n\tcoverImage?: ICover\n\n\ttype?: string\n\tformat?: string\n\tstatus?: string\n\tdescription?: string\n\tmoreInfo?: string\n\n\tstartDate?: IFuzzyDate\n\n\tseason?: string\n\tseasonYear?: number\n\n\tepisodes?: number\n\tsub?: number\n\tdub?: number\n\tduration?: number\n\n\tcountryOfOrigin?: string\n\tpopularity?: number\n\tfavourites?: number\n\n\tscore?: number\n\n\tisLocked?: boolean\n\tisAdult?: boolean\n\n\tgenres?: string[]\n\n\tnextAiringEpisode?: IAiringSchedule\n\n\tshikimori?: IBasicShikimori\n\tkitsu?: IBasicKitsu\n}\n\nexport interface IFranchise {\n\tcover?: string\n\tbanner?: string\n\ttitle?: string\n\tfranchise?: string\n\tdescription?: string\n}\n\nexport type Weekday =\n\t| 'monday'\n\t| 'tuesday'\n\t| 'wednesday'\n\t| 'thursday'\n\t| 'friday'\n\t| 'saturday'\n\t| 'sunday'\n\nexport type TSchedule = {\n\t[key in Weekday]: IScheduleData\n}\n\nexport interface IScheduleData {\n\tcurrent: boolean\n\tdata: IBasicKuroji[]\n}\n\n/*\n\tShikimori\n*/\nexport interface IShikimori {\n\tid: string\n\tidMal?: number\n\tname?: string\n\trussian?: string\n\tlicenseNameRu?: string\n\tenglish?: string\n\tjapanese?: string\n\tposter?: IPoster\n\tsynonyms: string[]\n\tkind?: string\n\trating?: string\n\tscore?: number\n\tstatus?: string\n\tepisodes?: number\n\tepisodesAired?: number\n\tduration?: number\n\tairedOn: IShikimoriFuzzyDate\n\treleasedOn: IShikimoriFuzzyDate\n\tfranchise?: string\n\turl?: string\n\tseason?: string\n\tcreatedAt?: string\n\tupdatedAt?: string\n\tnextEpisodeAt?: string\n\tvideos: IKurojiVideo[]\n\tscreenshots: IScreenshot[]\n}\n\nexport interface IPoster {\n\tid: number\n\toriginalUrl?: string\n\tmainUrl?: string\n}\n\nexport interface IShikimoriFuzzyDate extends IFuzzyDate {\n\tdate?: string\n}\n\nexport interface IKurojiVideo {\n\tid: string\n\turl?: string\n\tname?: string\n\tkind?: string\n\tplayerUrl?: string\n\timageUrl?: string\n}\n\nexport interface IScreenshot {\n\tid: string\n\toriginalUrl?: string\n\tx166Url?: string\n\tx332Url?: string\n}\n\n/*\n\tKitsu\n*/\nexport interface IKitsu {\n\tid: string\n\tanilistId?: number\n\ttype?: string\n\tselfLink?: string\n\tcreatedAt?: string\n\tupdatedAt?: string\n\tslug?: string\n\tsynopsis?: string\n\tcoverImageTopOffset?: number\n\tcanonicalTitle?: string\n\tabbreviatedTitles?: string[]\n\taverageRating?: string\n\tuserCount?: number\n\tfavoritesCount?: number\n\tstartDate?: string\n\tendDate?: string\n\tpopularityRank?: number\n\tratingRank?: number\n\tageRating?: string\n\tageRatingGuide?: string\n\tsubtype?: string\n\tstatus?: string\n\ttba?: string\n\tepisodeCount?: number\n\tepisodeLength?: number\n\tyoutubeVideoId?: string\n\tshowType?: string\n\tnsfw: boolean\n\n\ttitles?: IKitsuTitle\n\tposterImage?: IKitsuPoster\n\tcoverImage?: IKitsuCover\n\n\t// Relationships\n\tgenres?: IKitsuRelationship\n\tcategories?: IKitsuRelationship\n\tcastings?: IKitsuRelationship\n\tinstallments?: IKitsuRelationship\n\tmappings?: IKitsuRelationship\n\treviews?: IKitsuRelationship\n\tmediaRelationships?: IKitsuRelationship\n\tepisodes?: IKitsuRelationship\n\tstreamingLinks?: IKitsuRelationship\n\tanimeProductions?: IKitsuRelationship\n\tanimeCharacters?: IKitsuRelationship\n\tanimeStaff?: IKitsuRelationship\n}\n\nexport interface IKitsuTitle {\n\ten?: string\n\ten_jp?: string\n\tja_jp?: string\n}\n\nexport interface IKitsuImage {\n\ttiny?: string\n\tsmall?: string\n\tlarge?: string\n\toriginal?: string\n}\n\nexport interface IKitsuPoster extends IKitsuImage {\n\tmedium?: string\n\tdimensions: IKitsuPosterImageDimensions[]\n}\n\nexport interface IKitsuCover extends IKitsuImage {\n\tdimensions: IKitsuImageDimensions\n}\n\nexport interface IKitsuImageDimensions {\n\ttiny: IKitsuDimension\n\tsmall: IKitsuDimension\n\tlarge: IKitsuDimension\n}\n\nexport interface IKitsuPosterImageDimensions extends IKitsuImageDimensions {\n\tmedium: IKitsuDimension\n}\n\nexport interface IKitsuDimension {\n\twidth?: number\n\theight?: number\n}\n\nexport interface IKitsuRelationship {\n\tselfLink: string\n\trelated: string\n}\n\n/*\n\tStreaming\n*/\nexport interface IEpisode {\n\ttitle?: string\n\timage?: IEpisodeImage\n\tnumber?: number\n\toverview?: string\n\tdate?: string\n\tduration?: number\n\tfiller?: boolean\n\tsub?: boolean\n\tdub?: boolean\n}\n\nexport interface IEpisodeDetails extends IEpisode {\n\timages: EpisodeImage[]\n}\n\nexport interface EpisodeImage {\n\timage: IEpisodeImage\n\taspectRation?: number\n\theight?: number\n\twidth?: number\n\tiso_639_1?: string\n\tvoteAverage?: number\n\tvoteCount?: number\n}\n\nexport interface IEpisodeImage {\n\tw300: string\n\tw500: string\n\toriginal: string\n}\n\nexport interface IProvider extends IEpisode {\n\tproviders: IProviderInfo[]\n}\n\nexport interface IProviderInfo {\n\tid: string\n\tfiller: boolean\n\tprovider: EProvider\n\ttype: ESourceType\n}\n\nexport enum EProvider {\n\tzoro = 'zoro',\n\tanimekai = 'animekai',\n\tanimepahe = 'animepahe',\n}\n\nexport enum ESourceType {\n\tsoft_sub = 'soft_sub',\n\thard_sub = 'hard_sub',\n\tdub = 'dub',\n\tboth = 'both',\n}\n\n/*\n\tResponses\n*/\nexport interface Response<T> {\n\tpageInfo: PageInfo\n\tdata: T\n}\n\nexport interface SearchResponse<T> extends Response<T> {\n\tfranchise: FranchiseResponse\n}\n\nexport interface FranchiseResponse {\n\tpageInfo: PageInfo\n\tfranchise: IFranchise\n\tdata: IBasicKuroji[]\n}\n\nexport interface PageInfo {\n\ttotal: number\n\tperPage: number\n\tcurrentPage: number\n\tlastPage: number\n\thasNextPage: boolean\n}\n","import { META } from '../providers';\n\nexport const PROVIDERS = {\n\tANIME: [],\n\tMETA: [new META.Kuroji()],\n};\n"],"mappings":"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","names":["EProvider","ESourceType"]}